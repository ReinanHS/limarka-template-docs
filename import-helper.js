const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const tar = require('tar');

const REPO_NAME = 'vixetext/vixetext-template';
const VERSION_TAG = '1.x';

async function downloadAndExtractFromMaster() {
  const tempDirPath = path.join(__dirname, `temp_version-${VERSION_TAG}`);
  const versionedDirPath = path.join(__dirname, `versioned_docs/version-${VERSION_TAG}`);
  await fs.ensureDir(tempDirPath);

  const url = `https://github.com/${REPO_NAME}/archive/refs/heads/master.tar.gz`;

  try {
    // Download e extração
    const response = await axios({
      url,
      method: 'GET',
      responseType: 'stream'
    });

    await new Promise((resolve, reject) => {
      response.data
        .pipe(
          tar.x({
            strip: 1,
            C: tempDirPath
          })
        )
        .on('finish', resolve)
        .on('error', reject);
    });

    // Mover apenas a pasta docs para o diretório de destino
    const docsSourcePath = path.join(tempDirPath, 'docs');
    if (await fs.pathExists(docsSourcePath)) {
      await fs.move(docsSourcePath, versionedDirPath, { overwrite: true });
      console.log(`Docs da branch master movidos para ${versionedDirPath}`);
    } else {
      console.warn(`A pasta docs não foi encontrada na branch master`);
    }
  } catch (error) {
    console.error(`Erro ao baixar ou extrair a branch master:`, error.message);
  }

  // Limpeza do diretório temporário
  await fs.remove(tempDirPath);
}

async function createVersionFiles() {
  const directoryPath = path.join(__dirname, `versioned_docs/version-${VERSION_TAG}`);
  await fs.mkdir(directoryPath, { recursive: true });
  console.log(`Diretório criado: ${directoryPath}`);

  const versionsFilePath = path.join(__dirname, 'versions.json');
  await fs.writeFile(versionsFilePath, JSON.stringify([VERSION_TAG], null, 2));
  console.log(`Arquivo versions.json criado ou atualizado com sucesso.`);

  const sidebarPath = path.join(__dirname, `versioned_sidebars`);
  await fs.mkdir(sidebarPath, { recursive: true });

  const sidebarsFilePath = path.join(
    sidebarPath,
    `version-${VERSION_TAG}-sidebars.json`
  );

  await fs.writeFile(
    sidebarsFilePath,
    JSON.stringify(
      {
        tutorialSidebar: [
          {
            type: 'autogenerated',
            dirName: '.'
          }
        ]
      },
      null,
      2
    )
  );
  console.log(`Arquivo version-${VERSION_TAG}-sidebars.json criado ou atualizado com sucesso.`);
}

(async () => {
  await createVersionFiles();
  await downloadAndExtractFromMaster();
})();
